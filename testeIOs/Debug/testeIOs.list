
testeIOs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002330  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080024c4  080024c4  000124c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000452b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f9a  00000000  00000000  00024567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000450  00000000  00000000  00025508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003b8  00000000  00000000  00025958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e721  00000000  00000000  00025d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000598c  00000000  00000000  00044431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baae1  00000000  00000000  00049dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010489e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f3c  00000000  00000000  001048f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080024ac 	.word	0x080024ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080024ac 	.word	0x080024ac

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fad1 	bl	8000780 <HAL_Init>

  /* USER CODE BEGIN Init */
  initInput(GPIOC,GPIO_PIN_13);
 80001de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e2:	481f      	ldr	r0, [pc, #124]	; (8000260 <main+0x8c>)
 80001e4:	f000 f96c 	bl	80004c0 <initInput>
  initOutput(GPIOA,GPIO_PIN_5);
 80001e8:	2120      	movs	r1, #32
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 f947 	bl	8000480 <initOutput>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f837 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */
  	CLKEnable(GPIOA);
 80001f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fa:	f000 f8dd 	bl	80003b8 <CLKEnable>

  	int test;
  	test = 1; //input19
 80001fe:	2301      	movs	r3, #1
 8000200:	607b      	str	r3, [r7, #4]
  	//test = 2; //output19
  	//test = 3; //input20
  	//test = 4; //output20

  	switch(test){
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3b01      	subs	r3, #1
 8000206:	2b03      	cmp	r3, #3
 8000208:	d828      	bhi.n	800025c <main+0x88>
 800020a:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <main+0x3c>)
 800020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000210:	08000221 	.word	0x08000221
 8000214:	08000233 	.word	0x08000233
 8000218:	08000241 	.word	0x08000241
 800021c:	08000253 	.word	0x08000253
  		case 1:
  			inputTC(GPIOC, GPIO_PIN_13, GPIOA, GPIO_PIN_5);
 8000220:	2320      	movs	r3, #32
 8000222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	480d      	ldr	r0, [pc, #52]	; (8000260 <main+0x8c>)
 800022c:	f000 f9af 	bl	800058e <inputTC>
  			break;
 8000230:	e014      	b.n	800025c <main+0x88>
  		case 2:
  			outputTC(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	2120      	movs	r1, #32
 8000236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023a:	f000 f9df 	bl	80005fc <outputTC>
  			break;
 800023e:	e00d      	b.n	800025c <main+0x88>
  		case 3:
  			testeInput(GPIOC, GPIO_PIN_13, GPIOA, GPIO_PIN_5);
 8000240:	2320      	movs	r3, #32
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <main+0x8c>)
 800024c:	f000 fa02 	bl	8000654 <testeInput>
  			break;
 8000250:	e004      	b.n	800025c <main+0x88>
  		case 4:
  			testeOutput(GPIOA, GPIO_PIN_5);
 8000252:	2120      	movs	r1, #32
 8000254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000258:	f000 fa45 	bl	80006e6 <testeOutput>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025c:	e7fe      	b.n	800025c <main+0x88>
 800025e:	bf00      	nop
 8000260:	48000800 	.word	0x48000800

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	; 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 f912 	bl	800249c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800029a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fe98 	bl	8000fe0 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002b6:	f000 f819 	bl	80002ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2102      	movs	r1, #2
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 fed7 	bl	8002088 <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002e0:	f000 f804 	bl	80002ec <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3740      	adds	r7, #64	; 0x40
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <Error_Handler+0x8>
	...

080002f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_MspInit+0x44>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_MspInit+0x44>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <HAL_MspInit+0x44>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <HAL_MspInit+0x44>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	4a08      	ldr	r2, [pc, #32]	; (800033c <HAL_MspInit+0x44>)
 800031c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000320:	61d3      	str	r3, [r2, #28]
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_MspInit+0x44>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <NMI_Handler+0x4>

08000346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <BusFault_Handler+0x4>

08000358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <UsageFault_Handler+0x4>

0800035e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800038c:	f000 fa3e 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <SystemInit+0x20>)
 800039a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039e:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <SystemInit+0x20>)
 80003a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <CLKEnable>:
  * @brief  Inicializa o clock do GPIOx especificado.
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @retval None
  */
void CLKEnable(GPIO_TypeDef* GPIOx)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	if(GPIOx == GPIOA)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003c6:	d10b      	bne.n	80003e0 <CLKEnable+0x28>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b28      	ldr	r3, [pc, #160]	; (800046c <CLKEnable+0xb4>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a27      	ldr	r2, [pc, #156]	; (800046c <CLKEnable+0xb4>)
 80003ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d2:	6153      	str	r3, [r2, #20]
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <CLKEnable+0xb4>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003dc:	61fb      	str	r3, [r7, #28]
 80003de:	69fb      	ldr	r3, [r7, #28]
	if(GPIOx == GPIOB)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a23      	ldr	r2, [pc, #140]	; (8000470 <CLKEnable+0xb8>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d10b      	bne.n	8000400 <CLKEnable+0x48>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <CLKEnable+0xb4>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a1f      	ldr	r2, [pc, #124]	; (800046c <CLKEnable+0xb4>)
 80003ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b1d      	ldr	r3, [pc, #116]	; (800046c <CLKEnable+0xb4>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003fc:	61bb      	str	r3, [r7, #24]
 80003fe:	69bb      	ldr	r3, [r7, #24]
	if(GPIOx == GPIOC)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <CLKEnable+0xbc>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d10b      	bne.n	8000420 <CLKEnable+0x68>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <CLKEnable+0xb4>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <CLKEnable+0xb4>)
 800040e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000412:	6153      	str	r3, [r2, #20]
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <CLKEnable+0xb4>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	697b      	ldr	r3, [r7, #20]
	if(GPIOx == GPIOD)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <CLKEnable+0xc0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d10b      	bne.n	8000440 <CLKEnable+0x88>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <CLKEnable+0xb4>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a0f      	ldr	r2, [pc, #60]	; (800046c <CLKEnable+0xb4>)
 800042e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000432:	6153      	str	r3, [r2, #20]
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <CLKEnable+0xb4>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800043c:	613b      	str	r3, [r7, #16]
 800043e:	693b      	ldr	r3, [r7, #16]
	if(GPIOx == GPIOF)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <CLKEnable+0xc4>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d10b      	bne.n	8000460 <CLKEnable+0xa8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <CLKEnable+0xb4>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <CLKEnable+0xb4>)
 800044e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000452:	6153      	str	r3, [r2, #20]
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <CLKEnable+0xb4>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3724      	adds	r7, #36	; 0x24
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	48000400 	.word	0x48000400
 8000474:	48000800 	.word	0x48000800
 8000478:	48000c00 	.word	0x48000c00
 800047c:	48001400 	.word	0x48001400

08000480 <initOutput>:
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser inicializado.
  * @retval None
  */
void initOutput(GPIO_TypeDef* GPIOout, uint16_t GPIO_Pin_out)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_Pin_out;
 800049c:	887b      	ldrh	r3, [r7, #2]
 800049e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOout, &GPIO_InitStruct);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 fad4 	bl	8000a60 <HAL_GPIO_Init>
}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <initInput>:
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser inicializado.
  * @retval None
  */
void initInput(GPIO_TypeDef* GPIOin, uint16_t GPIO_Pin_in)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]

	  GPIO_InitStruct.Pin = GPIO_Pin_in;
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e0:	2300      	movs	r3, #0
 80004e2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOin, &GPIO_InitStruct);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 fab6 	bl	8000a60 <HAL_GPIO_Init>
}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <DeInit>:
  * @brief  Deinicializa o pino do GPIO especificado.
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser deinicializado.
  * @retval None
  */
void DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	HAL_GPIO_DeInit(GPIOx,GPIO_Pin);
 8000506:	6839      	ldr	r1, [r7, #0]
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fc33 	bl	8000d74 <HAL_GPIO_DeInit>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <read_pin>:
  * @brief  Realiza a leitura do pino de entrada especificado.
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser lido.
  * @retval O valor lido no pino de entrada.
  */
GPIO_PinState read_pin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 fd10 	bl	8000f4c <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <write_pin>:
  * @param  PinState especifica o valor a ser escrito no bit.
  * 		GPIO_PIN_RESET: escreve 0 no bit
  * 		GPIO_PIN_SET: escreve 1
  * @retval None.
  */
void write_pin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,GPIO_PinState PinState){
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	460b      	mov	r3, r1
 8000540:	807b      	strh	r3, [r7, #2]
 8000542:	4613      	mov	r3, r2
 8000544:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,PinState);
 8000546:	787a      	ldrb	r2, [r7, #1]
 8000548:	887b      	ldrh	r3, [r7, #2]
 800054a:	4619      	mov	r1, r3
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 fd15 	bl	8000f7c <HAL_GPIO_WritePin>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <toggle_pin>:
  * @brief  Inverte valor do o bit do pino especificado.
  * @param  GPIOx, onde x pode ser (A..F), para selecionar qual GPIO será utilizado.
  * @param  GPIO_Pin especifica o pino a ser invertido.
  * @retval None.
  */
void toggle_pin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOx,GPIO_Pin);
 8000566:	887b      	ldrh	r3, [r7, #2]
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 fd1e 	bl	8000fac <HAL_GPIO_TogglePin>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <delay>:
/**
  * @brief  Gera um delay preciso em milisegundos.
  * @param  Delay especifica o tempo de delay, em milisegundos.
  * @retval None.
  */
void delay(uint32_t Delay){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 f963 	bl	800084c <HAL_Delay>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <inputTC>:
  * @param  GPIOout é a porta que gera o sinal de saída.
  * @param  GPIO_Pin_out especifica o pino de saída.
  * @retval None
  */
void inputTC(GPIO_TypeDef* GPIOin, uint16_t GPIO_Pin_in, GPIO_TypeDef* GPIOout, uint16_t GPIO_Pin_out)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b084      	sub	sp, #16
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	461a      	mov	r2, r3
 800059a:	460b      	mov	r3, r1
 800059c:	817b      	strh	r3, [r7, #10]
 800059e:	4613      	mov	r3, r2
 80005a0:	813b      	strh	r3, [r7, #8]
	//Ativação dos pinos utilizados no teste
	initInput(GPIOin,GPIO_Pin_in);
 80005a2:	897b      	ldrh	r3, [r7, #10]
 80005a4:	4619      	mov	r1, r3
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f7ff ff8a 	bl	80004c0 <initInput>
	initOutput(GPIOout,GPIO_Pin_out);
 80005ac:	893b      	ldrh	r3, [r7, #8]
 80005ae:	4619      	mov	r1, r3
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff ff65 	bl	8000480 <initOutput>

	//Rotina do teste de verificação da tensão de operaçãodo pino de input
	while(read_pin(GPIOin, GPIO_Pin_in) == 0)
 80005b6:	e005      	b.n	80005c4 <inputTC+0x36>
	{
		write_pin(GPIOout, GPIO_Pin_out, GPIO_PIN_SET);
 80005b8:	893b      	ldrh	r3, [r7, #8]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff ffb9 	bl	8000536 <write_pin>
	while(read_pin(GPIOin, GPIO_Pin_in) == 0)
 80005c4:	897b      	ldrh	r3, [r7, #10]
 80005c6:	4619      	mov	r1, r3
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f7ff ffa4 	bl	8000516 <read_pin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f1      	beq.n	80005b8 <inputTC+0x2a>
	}
	write_pin(GPIOout, GPIO_Pin_out, GPIO_PIN_RESET); //O teste não denota um valor exato da tensão mínima de operação do pino.
 80005d4:	893b      	ldrh	r3, [r7, #8]
 80005d6:	2200      	movs	r2, #0
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f7ff ffab 	bl	8000536 <write_pin>

	//Desativação dos pinos
	DeInit(GPIOin, GPIO_Pin_in);
 80005e0:	897b      	ldrh	r3, [r7, #10]
 80005e2:	4619      	mov	r1, r3
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f7ff ff89 	bl	80004fc <DeInit>
	DeInit(GPIOout, GPIO_Pin_out);
 80005ea:	893b      	ldrh	r3, [r7, #8]
 80005ec:	4619      	mov	r1, r3
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ff84 	bl	80004fc <DeInit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <outputTC>:
  * @param  GPIO_Pin_out especifica o pino de saída.
  * @param  logic define o nível lógico para 1 = HIGH e 0 = LOW.
  * @retval None
  */
void outputTC(GPIO_TypeDef* GPIOout, uint16_t GPIO_Pin_out, int logic)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	460b      	mov	r3, r1
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	817b      	strh	r3, [r7, #10]
	//Ativação do pino de output para o teste
	initOutput(GPIOout, GPIO_Pin_out);
 800060a:	897b      	ldrh	r3, [r7, #10]
 800060c:	4619      	mov	r1, r3
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f7ff ff36 	bl	8000480 <initOutput>

	//Quando o parâmetro "logic" for igual a 1, o teste realizado será da medição em nível lógico alto.
	if(logic == 1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d106      	bne.n	8000628 <outputTC+0x2c>
		write_pin(GPIOout, GPIO_Pin_out, GPIO_PIN_SET);
 800061a:	897b      	ldrh	r3, [r7, #10]
 800061c:	2201      	movs	r2, #1
 800061e:	4619      	mov	r1, r3
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f7ff ff88 	bl	8000536 <write_pin>
 8000626:	e008      	b.n	800063a <outputTC+0x3e>
	//Quando o parâmetro "logic" for igual a 0, o teste realizado será da medição em nível lógico baixo.
	else if(logic == 0)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d105      	bne.n	800063a <outputTC+0x3e>
		write_pin(GPIOout, GPIO_Pin_out, GPIO_PIN_RESET);
 800062e:	897b      	ldrh	r3, [r7, #10]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f7ff ff7e 	bl	8000536 <write_pin>

	delay(5000);
 800063a:	f241 3088 	movw	r0, #5000	; 0x1388
 800063e:	f7ff ff9b 	bl	8000578 <delay>

	//Desativação do pino
	DeInit(GPIOout, GPIO_Pin_out);
 8000642:	897b      	ldrh	r3, [r7, #10]
 8000644:	4619      	mov	r1, r3
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff58 	bl	80004fc <DeInit>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <testeInput>:
  * @param  GPIOout é a porta que gera o sinal de saída.
  * @param  GPIO_Pin_out especifica o pino de saída.
  * @retval None
  */
void testeInput(GPIO_TypeDef* GPIOin, uint16_t GPIO_Pin_in, GPIO_TypeDef* GPIOout, uint16_t GPIO_Pin_out)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	461a      	mov	r2, r3
 8000660:	460b      	mov	r3, r1
 8000662:	817b      	strh	r3, [r7, #10]
 8000664:	4613      	mov	r3, r2
 8000666:	813b      	strh	r3, [r7, #8]
	/*Inicialização dos GPIOs*/
	initInput(GPIOin, GPIO_Pin_in);
 8000668:	897b      	ldrh	r3, [r7, #10]
 800066a:	4619      	mov	r1, r3
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f7ff ff27 	bl	80004c0 <initInput>
	initOutput(GPIOout, GPIO_Pin_out);
 8000672:	893b      	ldrh	r3, [r7, #8]
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ff02 	bl	8000480 <initOutput>

	/*O laço faz 1000 iterações, verifica o estado lógico da entrada e gera o sinal de saída*/
	for(int i = 0; i < 1000; i++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e01f      	b.n	80006c2 <testeInput+0x6e>
	{
		if(read_pin(GPIOin, GPIO_Pin_in) == 1)
 8000682:	897b      	ldrh	r3, [r7, #10]
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff ff45 	bl	8000516 <read_pin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d106      	bne.n	80006a0 <testeInput+0x4c>
			/*Quando o sinal de entrada estiver em HIGH o valor na saída também é HIGH*/
			write_pin(GPIOout, GPIO_Pin_out, GPIO_PIN_SET);
 8000692:	893b      	ldrh	r3, [r7, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	4619      	mov	r1, r3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff4c 	bl	8000536 <write_pin>
 800069e:	e00d      	b.n	80006bc <testeInput+0x68>
		else if(read_pin(GPIOin, GPIO_Pin_in) == 0)
 80006a0:	897b      	ldrh	r3, [r7, #10]
 80006a2:	4619      	mov	r1, r3
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f7ff ff36 	bl	8000516 <read_pin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <testeInput+0x68>
			/*Quando o sinal de entrada estiver em LOW o valor na saída também é LOW*/
			write_pin(GPIOout, GPIO_Pin_out, GPIO_PIN_RESET);
 80006b0:	893b      	ldrh	r3, [r7, #8]
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff3d 	bl	8000536 <write_pin>
	for(int i = 0; i < 1000; i++)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3301      	adds	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006c8:	dbdb      	blt.n	8000682 <testeInput+0x2e>
	}

	/*Desativação dos GPIOs*/
	DeInit(GPIOin, GPIO_Pin_in);
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	4619      	mov	r1, r3
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff ff14 	bl	80004fc <DeInit>
	DeInit(GPIOout, GPIO_Pin_out);
 80006d4:	893b      	ldrh	r3, [r7, #8]
 80006d6:	4619      	mov	r1, r3
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff0f 	bl	80004fc <DeInit>
}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <testeOutput>:
  * @param  GPIOout é a porta que gera o sinal de saída.
  * @param  GPIO_Pin_out especifica o pino de saída.
  * @retval None
  */
void testeOutput(GPIO_TypeDef* GPIOout, uint16_t GPIO_Pin_out)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	807b      	strh	r3, [r7, #2]
	/*Inicialização dos GPIOs*/
	initOutput(GPIOout, GPIO_Pin_out);
 80006f2:	887b      	ldrh	r3, [r7, #2]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fec2 	bl	8000480 <initOutput>

	/*O laço faz 1000 iterações, e varia o estado lógico do pino de saída*/
	for(int i = 0; i < 1000; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e007      	b.n	8000712 <testeOutput+0x2c>
		toggle_pin(GPIOout, GPIO_Pin_out);
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff27 	bl	800055a <toggle_pin>
	for(int i = 0; i < 1000; i++)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000718:	dbf3      	blt.n	8000702 <testeOutput+0x1c>

	/*Desativação dos GPIOs*/
	DeInit(GPIOout, GPIO_Pin_out);
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff feec 	bl	80004fc <DeInit>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff fe30 	bl	8000394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f001 fe7b 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fd39 	bl	80001d4 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000770:	080024fc 	.word	0x080024fc
  ldr r2, =_sbss
 8000774:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000778:	2000002c 	.word	0x2000002c

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f931 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff fdac 	bl	80002f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f93b 	bl	8000a46 <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f911 	bl	8000a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	20000028 	.word	0x20000028

08000834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;  
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028

0800084c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ffee 	bl	8000834 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffde 	bl	8000834 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff47 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff5c 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff8e 	bl	800094c <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffb0 	bl	80009b4 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e160      	b.n	8000d32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 8152 	beq.w	8000d2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d005      	beq.n	8000aa0 <HAL_GPIO_Init+0x40>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d130      	bne.n	8000b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	f003 0201 	and.w	r2, r3, #1
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d017      	beq.n	8000b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d123      	bne.n	8000b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0203 	and.w	r2, r3, #3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 80ac 	beq.w	8000d2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd4:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_GPIO_Init+0x2f0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bec:	4a59      	ldr	r2, [pc, #356]	; (8000d54 <HAL_GPIO_Init+0x2f4>)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c16:	d025      	beq.n	8000c64 <HAL_GPIO_Init+0x204>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4f      	ldr	r2, [pc, #316]	; (8000d58 <HAL_GPIO_Init+0x2f8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d01f      	beq.n	8000c60 <HAL_GPIO_Init+0x200>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4e      	ldr	r2, [pc, #312]	; (8000d5c <HAL_GPIO_Init+0x2fc>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d019      	beq.n	8000c5c <HAL_GPIO_Init+0x1fc>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4d      	ldr	r2, [pc, #308]	; (8000d60 <HAL_GPIO_Init+0x300>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1f8>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <HAL_GPIO_Init+0x304>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1f4>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <HAL_GPIO_Init+0x308>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1f0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a4a      	ldr	r2, [pc, #296]	; (8000d6c <HAL_GPIO_Init+0x30c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1ec>
 8000c48:	2306      	movs	r3, #6
 8000c4a:	e00c      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	e00a      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c50:	2305      	movs	r3, #5
 8000c52:	e008      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c54:	2304      	movs	r3, #4
 8000c56:	e006      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e004      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <HAL_GPIO_Init+0x206>
 8000c64:	2300      	movs	r3, #0
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	f002 0203 	and.w	r2, r2, #3
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	4093      	lsls	r3, r2
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c76:	4937      	ldr	r1, [pc, #220]	; (8000d54 <HAL_GPIO_Init+0x2f4>)
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c84:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca8:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd2:	4a27      	ldr	r2, [pc, #156]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfc:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_GPIO_Init+0x310>)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f47f ae97 	bne.w	8000a70 <HAL_GPIO_Init+0x10>
  }
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	48000c00 	.word	0x48000c00
 8000d64:	48001000 	.word	0x48001000
 8000d68:	48001400 	.word	0x48001400
 8000d6c:	48001800 	.word	0x48001800
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000d82:	e0c4      	b.n	8000f0e <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000d84:	2201      	movs	r2, #1
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80b7 	beq.w	8000f08 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000d9a:	4a64      	ldr	r2, [pc, #400]	; (8000f2c <HAL_GPIO_DeInit+0x1b8>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dc2:	d025      	beq.n	8000e10 <HAL_GPIO_DeInit+0x9c>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a5a      	ldr	r2, [pc, #360]	; (8000f30 <HAL_GPIO_DeInit+0x1bc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d01f      	beq.n	8000e0c <HAL_GPIO_DeInit+0x98>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a59      	ldr	r2, [pc, #356]	; (8000f34 <HAL_GPIO_DeInit+0x1c0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d019      	beq.n	8000e08 <HAL_GPIO_DeInit+0x94>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <HAL_GPIO_DeInit+0x1c4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d013      	beq.n	8000e04 <HAL_GPIO_DeInit+0x90>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_GPIO_DeInit+0x1c8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d00d      	beq.n	8000e00 <HAL_GPIO_DeInit+0x8c>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <HAL_GPIO_DeInit+0x1cc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_DeInit+0x88>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <HAL_GPIO_DeInit+0x1d0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d101      	bne.n	8000df8 <HAL_GPIO_DeInit+0x84>
 8000df4:	2306      	movs	r3, #6
 8000df6:	e00c      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000df8:	2307      	movs	r3, #7
 8000dfa:	e00a      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	e008      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e006      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000e04:	2303      	movs	r3, #3
 8000e06:	e004      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <HAL_GPIO_DeInit+0x9e>
 8000e10:	2300      	movs	r3, #0
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	f002 0203 	and.w	r2, r2, #3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4093      	lsls	r3, r2
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d132      	bne.n	8000e88 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000e22:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4947      	ldr	r1, [pc, #284]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	4943      	ldr	r1, [pc, #268]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000e3e:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4940      	ldr	r1, [pc, #256]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	493c      	ldr	r1, [pc, #240]	; (8000f48 <HAL_GPIO_DeInit+0x1d4>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000e6a:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <HAL_GPIO_DeInit+0x1b8>)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	482c      	ldr	r0, [pc, #176]	; (8000f2c <HAL_GPIO_DeInit+0x1b8>)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	400a      	ands	r2, r1
 8000e82:	3302      	adds	r3, #2
 8000e84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2103      	movs	r1, #3
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	401a      	ands	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	08d2      	lsrs	r2, r2, #3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	401a      	ands	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	401a      	ands	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2103      	movs	r1, #3
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	401a      	ands	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
    }

    position++;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f af34 	bne.w	8000d84 <HAL_GPIO_DeInit+0x10>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00
 8000f3c:	48001000 	.word	0x48001000
 8000f40:	48001400 	.word	0x48001400
 8000f44:	48001800 	.word	0x48001800
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43d9      	mvns	r1, r3
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ff0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	f001 b83a 	b.w	800207a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800100a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 816f 	beq.w	80012fa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800101c:	4bb5      	ldr	r3, [pc, #724]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b04      	cmp	r3, #4
 8001026:	d00c      	beq.n	8001042 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001028:	4bb2      	ldr	r3, [pc, #712]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d15c      	bne.n	80010ee <HAL_RCC_OscConfig+0x10e>
 8001034:	4baf      	ldr	r3, [pc, #700]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d155      	bne.n	80010ee <HAL_RCC_OscConfig+0x10e>
 8001042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001046:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001056:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x94>
 800106e:	4ba1      	ldr	r3, [pc, #644]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e015      	b.n	80010a0 <HAL_RCC_OscConfig+0xc0>
 8001074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001078:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001090:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800109c:	4b95      	ldr	r3, [pc, #596]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010a4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010a8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010ac:	fa92 f2a2 	rbit	r2, r2
 80010b0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010b8:	fab2 f282 	clz	r2, r2
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f042 0220 	orr.w	r2, r2, #32
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	f002 021f 	and.w	r2, r2, #31
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 8111 	beq.w	80012f8 <HAL_RCC_OscConfig+0x318>
 80010d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 8108 	bne.w	80012f8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f000 bfc6 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fe:	d106      	bne.n	800110e <HAL_RCC_OscConfig+0x12e>
 8001100:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a7b      	ldr	r2, [pc, #492]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e036      	b.n	800117c <HAL_RCC_OscConfig+0x19c>
 800110e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001112:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x158>
 800111e:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a74      	ldr	r2, [pc, #464]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b72      	ldr	r3, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a71      	ldr	r2, [pc, #452]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e021      	b.n	800117c <HAL_RCC_OscConfig+0x19c>
 8001138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800113c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x184>
 800114a:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a69      	ldr	r2, [pc, #420]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a66      	ldr	r2, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0x19c>
 8001164:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a62      	ldr	r2, [pc, #392]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b60      	ldr	r3, [pc, #384]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a5f      	ldr	r2, [pc, #380]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001180:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d059      	beq.n	8001240 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fb52 	bl	8000834 <HAL_GetTick>
 8001190:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001196:	f7ff fb4d 	bl	8000834 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	d902      	bls.n	80011ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f000 bf67 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
 80011ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80011c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d102      	bne.n	80011de <HAL_RCC_OscConfig+0x1fe>
 80011d8:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x22a>
 80011de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80011f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800120e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001212:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001216:	fa92 f2a2 	rbit	r2, r2
 800121a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800121e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	f002 021f 	and.w	r2, r2, #31
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0ab      	beq.n	8001196 <HAL_RCC_OscConfig+0x1b6>
 800123e:	e05c      	b.n	80012fa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff faf8 	bl	8000834 <HAL_GetTick>
 8001244:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124a:	f7ff faf3 	bl	8000834 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d902      	bls.n	8001260 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	f000 bf0d 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
 8001260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001264:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001268:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001274:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <HAL_RCC_OscConfig+0x2b2>
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x2de>
 8001292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001296:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_RCC_OscConfig+0x314>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80012c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80012d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1ab      	bne.n	800124a <HAL_RCC_OscConfig+0x26a>
 80012f2:	e002      	b.n	80012fa <HAL_RCC_OscConfig+0x31a>
 80012f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 817f 	beq.w	800160e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001310:	4ba7      	ldr	r3, [pc, #668]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800131c:	4ba4      	ldr	r3, [pc, #656]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d173      	bne.n	8001410 <HAL_RCC_OscConfig+0x430>
 8001328:	4ba1      	ldr	r3, [pc, #644]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001334:	d16c      	bne.n	8001410 <HAL_RCC_OscConfig+0x430>
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001348:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d102      	bne.n	8001366 <HAL_RCC_OscConfig+0x386>
 8001360:	4b93      	ldr	r3, [pc, #588]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	e013      	b.n	800138e <HAL_RCC_OscConfig+0x3ae>
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800137e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800138a:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2202      	movs	r2, #2
 8001390:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001394:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001398:	fa92 f2a2 	rbit	r2, r2
 800139c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013a4:	fab2 f282 	clz	r2, r2
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f042 0220 	orr.w	r2, r2, #32
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f002 021f 	and.w	r2, r2, #31
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00a      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
 80013c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d002      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f000 be52 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	21f8      	movs	r1, #248	; 0xf8
 80013ec:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80013f4:	fa91 f1a1 	rbit	r1, r1
 80013f8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80013fc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001400:	fab1 f181 	clz	r1, r1
 8001404:	b2c9      	uxtb	r1, r1
 8001406:	408b      	lsls	r3, r1
 8001408:	4969      	ldr	r1, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e0fe      	b.n	800160e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8088 	beq.w	8001532 <HAL_RCC_OscConfig+0x552>
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001434:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001442:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	461a      	mov	r2, r3
 800144a:	2301      	movs	r3, #1
 800144c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff f9f1 	bl	8000834 <HAL_GetTick>
 8001452:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff f9ec 	bl	8000834 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d902      	bls.n	800146e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	f000 be06 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001480:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x4be>
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	e013      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e6>
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	2202      	movs	r2, #2
 80014c8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80014cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014d0:	fa92 f2a2 	rbit	r2, r2
 80014d4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80014d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014dc:	fab2 f282 	clz	r2, r2
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f042 0220 	orr.w	r2, r2, #32
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f002 021f 	and.w	r2, r2, #31
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0af      	beq.n	8001458 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001504:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	21f8      	movs	r1, #248	; 0xf8
 800150e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001516:	fa91 f1a1 	rbit	r1, r1
 800151a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800151e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001522:	fab1 f181 	clz	r1, r1
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	408b      	lsls	r3, r1
 800152a:	4921      	ldr	r1, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e06d      	b.n	800160e <HAL_RCC_OscConfig+0x62e>
 8001532:	2301      	movs	r3, #1
 8001534:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001544:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001552:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	2300      	movs	r3, #0
 800155c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff f969 	bl	8000834 <HAL_GetTick>
 8001562:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff f964 	bl	8000834 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d902      	bls.n	800157e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	f000 bd7e 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5d4>
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <HAL_RCC_OscConfig+0x5d0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e016      	b.n	80015dc <HAL_RCC_OscConfig+0x5fc>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015d8:	4bbf      	ldr	r3, [pc, #764]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	2202      	movs	r2, #2
 80015de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80015e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80015e6:	fa92 f2a2 	rbit	r2, r2
 80015ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80015ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015f2:	fab2 f282 	clz	r2, r2
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f042 0220 	orr.w	r2, r2, #32
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f002 021f 	and.w	r2, r2, #31
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ac      	bne.n	8001568 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001612:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8113 	beq.w	800184a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d07c      	beq.n	800172e <HAL_RCC_OscConfig+0x74e>
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001646:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4ba2      	ldr	r3, [pc, #648]	; (80018dc <HAL_RCC_OscConfig+0x8fc>)
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	461a      	mov	r2, r3
 800165a:	2301      	movs	r3, #1
 800165c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff f8e9 	bl	8000834 <HAL_GetTick>
 8001662:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff f8e4 	bl	8000834 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d902      	bls.n	800167e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	f000 bcfe 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b7e      	ldr	r3, [pc, #504]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016ea:	2102      	movs	r1, #2
 80016ec:	6019      	str	r1, [r3, #0]
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f1a3 	rbit	r1, r3
 80016fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001700:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001704:	6019      	str	r1, [r3, #0]
  return result;
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d09d      	beq.n	8001668 <HAL_RCC_OscConfig+0x688>
 800172c:	e08d      	b.n	800184a <HAL_RCC_OscConfig+0x86a>
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001750:	601a      	str	r2, [r3, #0]
  return result;
 8001752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001756:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800175a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_RCC_OscConfig+0x8fc>)
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	461a      	mov	r2, r3
 800176c:	2300      	movs	r3, #0
 800176e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff f860 	bl	8000834 <HAL_GetTick>
 8001774:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff f85b 	bl	8000834 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d902      	bls.n	8001790 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	f000 bc75 	b.w	800207a <HAL_RCC_OscConfig+0x109a>
 8001790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001794:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001798:	2202      	movs	r2, #2
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017bc:	2202      	movs	r2, #2
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fa93 f2a3 	rbit	r2, r3
 80017ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017e0:	2202      	movs	r2, #2
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 80017fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001808:	2102      	movs	r1, #2
 800180a:	6019      	str	r1, [r3, #0]
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f1a3 	rbit	r1, r3
 800181a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001822:	6019      	str	r1, [r3, #0]
  return result;
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d197      	bne.n	800177a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 81a5 	beq.w	8001baa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_RCC_OscConfig+0x8f8>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001898:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_OscConfig+0x900>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d121      	bne.n	80018f0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x900>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x900>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7fe ffbc 	bl	8000834 <HAL_GetTick>
 80018bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e010      	b.n	80018e4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7fe ffb7 	bl	8000834 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d908      	bls.n	80018e4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e3d1      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	10908120 	.word	0x10908120
 80018e0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b8d      	ldr	r3, [pc, #564]	; (8001b1c <HAL_RCC_OscConfig+0xb3c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0e8      	beq.n	80018c2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x92e>
 8001900:	4b87      	ldr	r3, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a86      	ldr	r2, [pc, #536]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e035      	b.n	800197a <HAL_RCC_OscConfig+0x99a>
 800190e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001912:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x958>
 800191e:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a7c      	ldr	r2, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	e020      	b.n	800197a <HAL_RCC_OscConfig+0x99a>
 8001938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b05      	cmp	r3, #5
 8001946:	d10c      	bne.n	8001962 <HAL_RCC_OscConfig+0x982>
 8001948:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6213      	str	r3, [r2, #32]
 8001960:	e00b      	b.n	800197a <HAL_RCC_OscConfig+0x99a>
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8081 	beq.w	8001a8e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7fe ff52 	bl	8000834 <HAL_GetTick>
 8001990:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7fe ff4d 	bl	8000834 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e365      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fa93 f2a3 	rbit	r2, r3
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0xa3a>
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	e013      	b.n	8001a42 <HAL_RCC_OscConfig+0xa62>
 8001a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a38:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a52:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fa92 f1a2 	rbit	r1, r2
 8001a5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a60:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a6a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d084      	beq.n	8001996 <HAL_RCC_OscConfig+0x9b6>
 8001a8c:	e083      	b.n	8001b96 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe fed1 	bl	8000834 <HAL_GetTick>
 8001a92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7fe fecc 	bl	8000834 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e2e4      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ab8:	2202      	movs	r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ace:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001af6:	601a      	str	r2, [r3, #0]
  return result;
 8001af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_OscConfig+0xb44>
 8001b16:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_RCC_OscConfig+0xb40>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	e017      	b.n	8001b4c <HAL_RCC_OscConfig+0xb6c>
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b34:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b42:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4bb3      	ldr	r3, [pc, #716]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b54:	2102      	movs	r1, #2
 8001b56:	6011      	str	r1, [r2, #0]
 8001b58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b5c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	fa92 f1a2 	rbit	r1, r2
 8001b66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b6a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b6e:	6011      	str	r1, [r2, #0]
  return result;
 8001b70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b74:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f002 021f 	and.w	r2, r2, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d180      	bne.n	8001a98 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b96:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d105      	bne.n	8001baa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b9e      	ldr	r3, [pc, #632]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a9d      	ldr	r2, [pc, #628]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 825e 	beq.w	8002078 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	4b96      	ldr	r3, [pc, #600]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	f000 821f 	beq.w	8002008 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	f040 8170 	bne.w	8001ebc <HAL_RCC_OscConfig+0xedc>
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c00:	601a      	str	r2, [r3, #0]
  return result;
 8001c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c06:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c0a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7fe fe07 	bl	8000834 <HAL_GetTick>
 8001c26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	e009      	b.n	8001c40 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7fe fe02 	bl	8000834 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e21c      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c64:	601a      	str	r2, [r3, #0]
  return result;
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_OscConfig+0xcaa>
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	e027      	b.n	8001cda <HAL_RCC_OscConfig+0xcfa>
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cde:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ce2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce6:	6011      	str	r1, [r2, #0]
 8001ce8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	fa92 f1a2 	rbit	r1, r2
 8001cf6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cfa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001cfe:	6011      	str	r1, [r2, #0]
  return result;
 8001d00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d04:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	fab2 f282 	clz	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d182      	bne.n	8001c2c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	f023 020f 	bic.w	r2, r3, #15
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	4937      	ldr	r1, [pc, #220]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d40:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a19      	ldr	r1, [r3, #32]
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	492d      	ldr	r1, [pc, #180]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d8c:	601a      	str	r2, [r3, #0]
  return result;
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d96:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe fd41 	bl	8000834 <HAL_GetTick>
 8001db2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db6:	e009      	b.n	8001dcc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe fd3c 	bl	8000834 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e156      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	fa93 f2a3 	rbit	r2, r3
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001df0:	601a      	str	r2, [r3, #0]
  return result;
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d105      	bne.n	8001e1c <HAL_RCC_OscConfig+0xe3c>
 8001e10:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <HAL_RCC_OscConfig+0xe38>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e02a      	b.n	8001e6c <HAL_RCC_OscConfig+0xe8c>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e54:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4b86      	ldr	r3, [pc, #536]	; (8002084 <HAL_RCC_OscConfig+0x10a4>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	fa92 f1a2 	rbit	r1, r2
 8001e88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e8c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e90:	6011      	str	r1, [r2, #0]
  return result;
 8001e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e96:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f43f af7f 	beq.w	8001db8 <HAL_RCC_OscConfig+0xdd8>
 8001eba:	e0dd      	b.n	8002078 <HAL_RCC_OscConfig+0x1098>
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ee0:	601a      	str	r2, [r3, #0]
  return result;
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001eea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fc97 	bl	8000834 <HAL_GetTick>
 8001f06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe fc92 	bl	8000834 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e0ac      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f44:	601a      	str	r2, [r3, #0]
  return result;
 8001f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_OscConfig+0xf8a>
 8001f64:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCC_OscConfig+0x10a4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e027      	b.n	8001fba <HAL_RCC_OscConfig+0xfda>
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_RCC_OscConfig+0x10a4>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fbe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fc6:	6011      	str	r1, [r2, #0]
 8001fc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	fa92 f1a2 	rbit	r1, r2
 8001fd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fda:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001fde:	6011      	str	r1, [r2, #0]
  return result;
 8001fe0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fe4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f002 021f 	and.w	r2, r2, #31
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d182      	bne.n	8001f0c <HAL_RCC_OscConfig+0xf2c>
 8002006:	e037      	b.n	8002078 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e02e      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_RCC_OscConfig+0x10a4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x10a4>)
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800202c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002030:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	d117      	bne.n	8002074 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002044:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002048:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002050:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002058:	429a      	cmp	r2, r3
 800205a:	d10b      	bne.n	8002074 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800205c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002060:	f003 020f 	and.w	r2, r3, #15
 8002064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002068:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09e      	sub	sp, #120	; 0x78
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e162      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b90      	ldr	r3, [pc, #576]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d910      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b8d      	ldr	r3, [pc, #564]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	498b      	ldr	r1, [pc, #556]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b89      	ldr	r3, [pc, #548]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e14a      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b82      	ldr	r3, [pc, #520]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	497f      	ldr	r1, [pc, #508]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80dc 	beq.w	80022b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d13c      	bne.n	800217e <HAL_RCC_ClockConfig+0xf6>
 8002104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002108:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d102      	bne.n	800212e <HAL_RCC_ClockConfig+0xa6>
 8002128:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	e00f      	b.n	800214e <HAL_RCC_ClockConfig+0xc6>
 800212e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002132:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	667b      	str	r3, [r7, #100]	; 0x64
 800213c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
 8002142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800214a:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002152:	65ba      	str	r2, [r7, #88]	; 0x58
 8002154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800215c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800215e:	fab2 f282 	clz	r2, r2
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f042 0220 	orr.w	r2, r2, #32
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	f002 021f 	and.w	r2, r2, #31
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d17b      	bne.n	8002272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0f3      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d13c      	bne.n	8002200 <HAL_RCC_ClockConfig+0x178>
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x128>
 80021aa:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e00f      	b.n	80021d0 <HAL_RCC_ClockConfig+0x148>
 80021b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
 80021c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80021d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f042 0220 	orr.w	r2, r2, #32
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f002 021f 	and.w	r2, r2, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13a      	bne.n	8002272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0b2      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
 8002200:	2302      	movs	r3, #2
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_RCC_ClockConfig+0x1a0>
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	e00d      	b.n	8002244 <HAL_RCC_ClockConfig+0x1bc>
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2202      	movs	r2, #2
 8002246:	61ba      	str	r2, [r7, #24]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	617a      	str	r2, [r7, #20]
  return result;
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e079      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	491a      	ldr	r1, [pc, #104]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7fe fad6 	bl	8000834 <HAL_GetTick>
 8002288:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7fe fad2 	bl	8000834 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e061      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_RCC_ClockConfig+0x260>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d214      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 0207 	bic.w	r2, r3, #7
 80022ca:	4906      	ldr	r1, [pc, #24]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_RCC_ClockConfig+0x25c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e040      	b.n	8002366 <HAL_RCC_ClockConfig+0x2de>
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_ClockConfig+0x2e8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	491a      	ldr	r1, [pc, #104]	; (8002370 <HAL_RCC_ClockConfig+0x2e8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_RCC_ClockConfig+0x2e8>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4912      	ldr	r1, [pc, #72]	; (8002370 <HAL_RCC_ClockConfig+0x2e8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800232a:	f000 f829 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800232e:	4601      	mov	r1, r0
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCC_ClockConfig+0x2e8>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	22f0      	movs	r2, #240	; 0xf0
 800233a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	60fa      	str	r2, [r7, #12]
  return result;
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	40d3      	lsrs	r3, r2
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x2ec>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	fa21 f303 	lsr.w	r3, r1, r3
 8002356:	4a08      	ldr	r2, [pc, #32]	; (8002378 <HAL_RCC_ClockConfig+0x2f0>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_ClockConfig+0x2f4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fa24 	bl	80007ac <HAL_InitTick>
  
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3778      	adds	r7, #120	; 0x78
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	080024c4 	.word	0x080024c4
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b08b      	sub	sp, #44	; 0x2c
 8002384:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x30>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ae:	e03f      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023b2:	623b      	str	r3, [r7, #32]
      break;
 80023b4:	e03f      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	fa92 f2a2 	rbit	r2, r2
 80023c8:	607a      	str	r2, [r7, #4]
  return result;
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	40d3      	lsrs	r3, r2
 80023d4:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_RCC_GetSysClockFreq+0xcc>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	220f      	movs	r2, #15
 80023e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	fa92 f2a2 	rbit	r2, r2
 80023ec:	60fa      	str	r2, [r7, #12]
  return result;
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	fab2 f282 	clz	r2, r2
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	40d3      	lsrs	r3, r2
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_RCC_GetSysClockFreq+0xc8>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	e007      	b.n	800242a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_RCC_GetSysClockFreq+0xc8>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	623b      	str	r3, [r7, #32]
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002432:	623b      	str	r3, [r7, #32]
      break;
 8002434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002436:	6a3b      	ldr	r3, [r7, #32]
}
 8002438:	4618      	mov	r0, r3
 800243a:	372c      	adds	r7, #44	; 0x2c
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000
 8002448:	007a1200 	.word	0x007a1200
 800244c:	080024d4 	.word	0x080024d4
 8002450:	080024e4 	.word	0x080024e4

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	4d0d      	ldr	r5, [pc, #52]	; (800248c <__libc_init_array+0x38>)
 8002458:	4c0d      	ldr	r4, [pc, #52]	; (8002490 <__libc_init_array+0x3c>)
 800245a:	1b64      	subs	r4, r4, r5
 800245c:	10a4      	asrs	r4, r4, #2
 800245e:	2600      	movs	r6, #0
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	4d0b      	ldr	r5, [pc, #44]	; (8002494 <__libc_init_array+0x40>)
 8002466:	4c0c      	ldr	r4, [pc, #48]	; (8002498 <__libc_init_array+0x44>)
 8002468:	f000 f820 	bl	80024ac <_init>
 800246c:	1b64      	subs	r4, r4, r5
 800246e:	10a4      	asrs	r4, r4, #2
 8002470:	2600      	movs	r6, #0
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f855 3b04 	ldr.w	r3, [r5], #4
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f855 3b04 	ldr.w	r3, [r5], #4
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	080024f4 	.word	0x080024f4
 8002490:	080024f4 	.word	0x080024f4
 8002494:	080024f4 	.word	0x080024f4
 8002498:	080024f8 	.word	0x080024f8

0800249c <memset>:
 800249c:	4402      	add	r2, r0
 800249e:	4603      	mov	r3, r0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	f803 1b01 	strb.w	r1, [r3], #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <_init>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr

080024b8 <_fini>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr
