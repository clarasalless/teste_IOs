
testeIOs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002040  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080021d4  080021d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002204  08002204  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002204  08002204  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002204  08002204  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002208  08002208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800220c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fce  00000000  00000000  00024507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000420  00000000  00000000  000254d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000388  00000000  00000000  000258f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e721  00000000  00000000  00025c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005955  00000000  00000000  000443a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baa6c  00000000  00000000  00049cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00104762  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e60  00000000  00000000  001047b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080021bc 	.word	0x080021bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080021bc 	.word	0x080021bc

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f98a 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80a 	bl	80001f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  //testeInput(GPIOC, GPIO_PIN_13, GPIOA, GPIO_PIN_5);
  CLKEnable(GPIOA);
 80001e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e4:	f000 f8b0 	bl	8000348 <CLKEnable>
  testeOutput(GPIOA,GPIO_PIN_5);
 80001e8:	2120      	movs	r1, #32
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 f92f 	bl	8000450 <testeOutput>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x1e>

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 ffd2 	bl	80021ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800022a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fd58 	bl	8000cf0 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000246:	f000 f819 	bl	800027c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2302      	movs	r3, #2
 8000250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2102      	movs	r1, #2
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fd97 	bl	8001d98 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000270:	f000 f804 	bl	800027c <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3740      	adds	r7, #64	; 0x40
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000280:	b672      	cpsid	i
}
 8000282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000284:	e7fe      	b.n	8000284 <Error_Handler+0x8>
	...

08000288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <HAL_MspInit+0x44>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <HAL_MspInit+0x44>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <HAL_MspInit+0x44>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <HAL_MspInit+0x44>)
 80002a8:	69db      	ldr	r3, [r3, #28]
 80002aa:	4a08      	ldr	r2, [pc, #32]	; (80002cc <HAL_MspInit+0x44>)
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	61d3      	str	r3, [r2, #28]
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_MspInit+0x44>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <NMI_Handler+0x4>

080002d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002da:	e7fe      	b.n	80002da <HardFault_Handler+0x4>

080002dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <MemManage_Handler+0x4>

080002e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <BusFault_Handler+0x4>

080002e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <UsageFault_Handler+0x4>

080002ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800031c:	f000 f92e 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SystemInit+0x20>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <SystemInit+0x20>)
 8000330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <CLKEnable>:
#include <stdio.h>
#include "stm32f3xx_hal.h"

void CLKEnable(GPIO_TypeDef* GPIOx)
{
 8000348:	b480      	push	{r7}
 800034a:	b089      	sub	sp, #36	; 0x24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	if(GPIOx == GPIOA)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000356:	d10b      	bne.n	8000370 <CLKEnable+0x28>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <CLKEnable+0xb4>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a27      	ldr	r2, [pc, #156]	; (80003fc <CLKEnable+0xb4>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000362:	6153      	str	r3, [r2, #20]
 8000364:	4b25      	ldr	r3, [pc, #148]	; (80003fc <CLKEnable+0xb4>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036c:	61fb      	str	r3, [r7, #28]
 800036e:	69fb      	ldr	r3, [r7, #28]
	if(GPIOx == GPIOB)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a23      	ldr	r2, [pc, #140]	; (8000400 <CLKEnable+0xb8>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d10b      	bne.n	8000390 <CLKEnable+0x48>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <CLKEnable+0xb4>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a1f      	ldr	r2, [pc, #124]	; (80003fc <CLKEnable+0xb4>)
 800037e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000382:	6153      	str	r3, [r2, #20]
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <CLKEnable+0xb4>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800038c:	61bb      	str	r3, [r7, #24]
 800038e:	69bb      	ldr	r3, [r7, #24]
	if(GPIOx == GPIOC)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <CLKEnable+0xbc>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d10b      	bne.n	80003b0 <CLKEnable+0x68>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <CLKEnable+0xb4>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <CLKEnable+0xb4>)
 800039e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003a2:	6153      	str	r3, [r2, #20]
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <CLKEnable+0xb4>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ac:	617b      	str	r3, [r7, #20]
 80003ae:	697b      	ldr	r3, [r7, #20]
	if(GPIOx == GPIOD)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a15      	ldr	r2, [pc, #84]	; (8000408 <CLKEnable+0xc0>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d10b      	bne.n	80003d0 <CLKEnable+0x88>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <CLKEnable+0xb4>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <CLKEnable+0xb4>)
 80003be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003c2:	6153      	str	r3, [r2, #20]
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <CLKEnable+0xb4>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80003cc:	613b      	str	r3, [r7, #16]
 80003ce:	693b      	ldr	r3, [r7, #16]
	if(GPIOx == GPIOF)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <CLKEnable+0xc4>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d10b      	bne.n	80003f0 <CLKEnable+0xa8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <CLKEnable+0xb4>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a07      	ldr	r2, [pc, #28]	; (80003fc <CLKEnable+0xb4>)
 80003de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003e2:	6153      	str	r3, [r2, #20]
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <CLKEnable+0xb4>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]
}
 80003f0:	bf00      	nop
 80003f2:	3724      	adds	r7, #36	; 0x24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	48000400 	.word	0x48000400
 8000404:	48000800 	.word	0x48000800
 8000408:	48000c00 	.word	0x48000c00
 800040c:	48001400 	.word	0x48001400

08000410 <initOutput>:

void initOutput(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_Pin;
 800042c:	887b      	ldrh	r3, [r7, #2]
 800042e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000438:	2303      	movs	r3, #3
 800043a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	4619      	mov	r1, r3
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f9c4 	bl	80007d0 <HAL_GPIO_Init>
}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <testeOutput>:
	HAL_GPIO_DeInit(GPIOin, GPIO_Pin_in);
	HAL_GPIO_DeInit(GPIOout, GPIO_Pin_out);
}

void testeOutput(GPIO_TypeDef* GPIOout, uint16_t GPIO_Pin_out)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	807b      	strh	r3, [r7, #2]
	//inicialização dos IOs:
	initOutput(GPIOout, GPIO_Pin_out);
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	4619      	mov	r1, r3
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ffd5 	bl	8000410 <initOutput>

	for(int i = 0; i < 1000; i++)
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e00a      	b.n	8000482 <testeOutput+0x32>
	{
		HAL_GPIO_TogglePin(GPIOout, GPIO_Pin_out);
 800046c:	887b      	ldrh	r3, [r7, #2]
 800046e:	4619      	mov	r1, r3
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f000 fc23 	bl	8000cbc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000476:	2064      	movs	r0, #100	; 0x64
 8000478:	f000 f8a0 	bl	80005bc <HAL_Delay>
	for(int i = 0; i < 1000; i++)
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3301      	adds	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000488:	dbf0      	blt.n	800046c <testeOutput+0x1c>
	}

	//desativação dos IOs:
	HAL_GPIO_DeInit(GPIOout, GPIO_Pin_out);
 800048a:	887b      	ldrh	r3, [r7, #2]
 800048c:	4619      	mov	r1, r3
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f000 fb28 	bl	8000ae4 <HAL_GPIO_DeInit>
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800049c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004a0:	f7ff ff40 	bl	8000324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ca:	f001 fe4b 	bl	8002164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ce:	f7ff fe81 	bl	80001d4 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004e0:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 80004e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004e8:	2000002c 	.word	0x2000002c

080004ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_2_IRQHandler>
	...

080004f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x28>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x28>)
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f931 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f7ff febc 	bl	8000288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40022000 	.word	0x40022000

0800051c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f93b 	bl	80007b6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f911 	bl	800077e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000000 	.word	0x20000000
 8000574:	20000008 	.word	0x20000008
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_Delay+0x44>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff8e 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff47 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000790:	f7ff ff5c 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff8e 	bl	80006bc <NVIC_EncodePriority>
 80007a0:	4602      	mov	r2, r0
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5d 	bl	8000668 <__NVIC_SetPriority>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffb0 	bl	8000724 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e160      	b.n	8000aa2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ec:	4013      	ands	r3, r2
 80007ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 8152 	beq.w	8000a9c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	2b01      	cmp	r3, #1
 8000802:	d005      	beq.n	8000810 <HAL_GPIO_Init+0x40>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b02      	cmp	r3, #2
 800080e:	d130      	bne.n	8000872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2203      	movs	r2, #3
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4313      	orrs	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000846:	2201      	movs	r2, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	f003 0201 	and.w	r2, r3, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	2b03      	cmp	r3, #3
 800087c:	d017      	beq.n	80008ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 0303 	and.w	r3, r3, #3
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d123      	bne.n	8000902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	220f      	movs	r2, #15
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	691a      	ldr	r2, [r3, #16]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	08da      	lsrs	r2, r3, #3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3208      	adds	r2, #8
 80008fc:	6939      	ldr	r1, [r7, #16]
 80008fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0203 	and.w	r2, r3, #3
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 80ac 	beq.w	8000a9c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000944:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <HAL_GPIO_Init+0x2f0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a5d      	ldr	r2, [pc, #372]	; (8000ac0 <HAL_GPIO_Init+0x2f0>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b5b      	ldr	r3, [pc, #364]	; (8000ac0 <HAL_GPIO_Init+0x2f0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800095c:	4a59      	ldr	r2, [pc, #356]	; (8000ac4 <HAL_GPIO_Init+0x2f4>)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000986:	d025      	beq.n	80009d4 <HAL_GPIO_Init+0x204>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a4f      	ldr	r2, [pc, #316]	; (8000ac8 <HAL_GPIO_Init+0x2f8>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d01f      	beq.n	80009d0 <HAL_GPIO_Init+0x200>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a4e      	ldr	r2, [pc, #312]	; (8000acc <HAL_GPIO_Init+0x2fc>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d019      	beq.n	80009cc <HAL_GPIO_Init+0x1fc>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a4d      	ldr	r2, [pc, #308]	; (8000ad0 <HAL_GPIO_Init+0x300>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d013      	beq.n	80009c8 <HAL_GPIO_Init+0x1f8>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_GPIO_Init+0x304>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d00d      	beq.n	80009c4 <HAL_GPIO_Init+0x1f4>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a4b      	ldr	r2, [pc, #300]	; (8000ad8 <HAL_GPIO_Init+0x308>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d007      	beq.n	80009c0 <HAL_GPIO_Init+0x1f0>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a4a      	ldr	r2, [pc, #296]	; (8000adc <HAL_GPIO_Init+0x30c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d101      	bne.n	80009bc <HAL_GPIO_Init+0x1ec>
 80009b8:	2306      	movs	r3, #6
 80009ba:	e00c      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009bc:	2307      	movs	r3, #7
 80009be:	e00a      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009c0:	2305      	movs	r3, #5
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009c4:	2304      	movs	r3, #4
 80009c6:	e006      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009c8:	2303      	movs	r3, #3
 80009ca:	e004      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <HAL_GPIO_Init+0x206>
 80009d4:	2300      	movs	r3, #0
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	f002 0203 	and.w	r2, r2, #3
 80009dc:	0092      	lsls	r2, r2, #2
 80009de:	4093      	lsls	r3, r2
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e6:	4937      	ldr	r1, [pc, #220]	; (8000ac4 <HAL_GPIO_Init+0x2f4>)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3302      	adds	r3, #2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a42:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f47f ae97 	bne.w	80007e0 <HAL_GPIO_Init+0x10>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010000 	.word	0x40010000
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	48000800 	.word	0x48000800
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	48001000 	.word	0x48001000
 8000ad8:	48001400 	.word	0x48001400
 8000adc:	48001800 	.word	0x48001800
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000af2:	e0c4      	b.n	8000c7e <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000af4:	2201      	movs	r2, #1
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80b7 	beq.w	8000c78 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b0a:	4a64      	ldr	r2, [pc, #400]	; (8000c9c <HAL_GPIO_DeInit+0x1b8>)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3302      	adds	r3, #2
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b32:	d025      	beq.n	8000b80 <HAL_GPIO_DeInit+0x9c>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a5a      	ldr	r2, [pc, #360]	; (8000ca0 <HAL_GPIO_DeInit+0x1bc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d01f      	beq.n	8000b7c <HAL_GPIO_DeInit+0x98>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a59      	ldr	r2, [pc, #356]	; (8000ca4 <HAL_GPIO_DeInit+0x1c0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d019      	beq.n	8000b78 <HAL_GPIO_DeInit+0x94>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a58      	ldr	r2, [pc, #352]	; (8000ca8 <HAL_GPIO_DeInit+0x1c4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_DeInit+0x90>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a57      	ldr	r2, [pc, #348]	; (8000cac <HAL_GPIO_DeInit+0x1c8>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_DeInit+0x8c>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a56      	ldr	r2, [pc, #344]	; (8000cb0 <HAL_GPIO_DeInit+0x1cc>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_DeInit+0x88>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a55      	ldr	r2, [pc, #340]	; (8000cb4 <HAL_GPIO_DeInit+0x1d0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_DeInit+0x84>
 8000b64:	2306      	movs	r3, #6
 8000b66:	e00c      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b68:	2307      	movs	r3, #7
 8000b6a:	e00a      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	e008      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b70:	2304      	movs	r3, #4
 8000b72:	e006      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b74:	2303      	movs	r3, #3
 8000b76:	e004      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <HAL_GPIO_DeInit+0x9e>
 8000b80:	2300      	movs	r3, #0
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d132      	bne.n	8000bf8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000b92:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4947      	ldr	r1, [pc, #284]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000ba0:	4b45      	ldr	r3, [pc, #276]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4943      	ldr	r1, [pc, #268]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000bae:	4b42      	ldr	r3, [pc, #264]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4940      	ldr	r1, [pc, #256]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	493c      	ldr	r1, [pc, #240]	; (8000cb8 <HAL_GPIO_DeInit+0x1d4>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000bda:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <HAL_GPIO_DeInit+0x1b8>)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43da      	mvns	r2, r3
 8000bea:	482c      	ldr	r0, [pc, #176]	; (8000c9c <HAL_GPIO_DeInit+0x1b8>)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2103      	movs	r1, #3
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	401a      	ands	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	08da      	lsrs	r2, r3, #3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3208      	adds	r2, #8
 8000c16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	08d2      	lsrs	r2, r2, #3
 8000c2e:	4019      	ands	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2103      	movs	r1, #3
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	401a      	ands	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	2101      	movs	r1, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	609a      	str	r2, [r3, #8]
    }

    position++;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f af34 	bne.w	8000af4 <HAL_GPIO_DeInit+0x10>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	371c      	adds	r7, #28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	48000400 	.word	0x48000400
 8000ca4:	48000800 	.word	0x48000800
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	48001000 	.word	0x48001000
 8000cb0:	48001400 	.word	0x48001400
 8000cb4:	48001800 	.word	0x48001800
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	041a      	lsls	r2, r3, #16
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43d9      	mvns	r1, r3
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	400b      	ands	r3, r1
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f001 b83a 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 816f 	beq.w	800100a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d2c:	4bb5      	ldr	r3, [pc, #724]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d00c      	beq.n	8000d52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d38:	4bb2      	ldr	r3, [pc, #712]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d15c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x10e>
 8000d44:	4baf      	ldr	r3, [pc, #700]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d50:	d155      	bne.n	8000dfe <HAL_RCC_OscConfig+0x10e>
 8000d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <HAL_RCC_OscConfig+0x94>
 8000d7e:	4ba1      	ldr	r3, [pc, #644]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	e015      	b.n	8000db0 <HAL_RCC_OscConfig+0xc0>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000da0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dac:	4b95      	ldr	r3, [pc, #596]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000db8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000dbc:	fa92 f2a2 	rbit	r2, r2
 8000dc0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000dc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dc8:	fab2 f282 	clz	r2, r2
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	f042 0220 	orr.w	r2, r2, #32
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	f002 021f 	and.w	r2, r2, #31
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 8111 	beq.w	8001008 <HAL_RCC_OscConfig+0x318>
 8000de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8108 	bne.w	8001008 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f000 bfc6 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0e:	d106      	bne.n	8000e1e <HAL_RCC_OscConfig+0x12e>
 8000e10:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a7b      	ldr	r2, [pc, #492]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e036      	b.n	8000e8c <HAL_RCC_OscConfig+0x19c>
 8000e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x158>
 8000e2e:	4b75      	ldr	r3, [pc, #468]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a74      	ldr	r2, [pc, #464]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b72      	ldr	r3, [pc, #456]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a71      	ldr	r2, [pc, #452]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e021      	b.n	8000e8c <HAL_RCC_OscConfig+0x19c>
 8000e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x184>
 8000e5a:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a69      	ldr	r2, [pc, #420]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b67      	ldr	r3, [pc, #412]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a66      	ldr	r2, [pc, #408]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0x19c>
 8000e74:	4b63      	ldr	r3, [pc, #396]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a62      	ldr	r2, [pc, #392]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b60      	ldr	r3, [pc, #384]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a5f      	ldr	r2, [pc, #380]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d059      	beq.n	8000f50 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fb82 	bl	80005a4 <HAL_GetTick>
 8000ea0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea4:	e00a      	b.n	8000ebc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fb7d 	bl	80005a4 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d902      	bls.n	8000ebc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f000 bf67 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
 8000ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ed0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d102      	bne.n	8000eee <HAL_RCC_OscConfig+0x1fe>
 8000ee8:	4b46      	ldr	r3, [pc, #280]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x22a>
 8000eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f06:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f0a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f16:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f22:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f26:	fa92 f2a2 	rbit	r2, r2
 8000f2a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f2e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f32:	fab2 f282 	clz	r2, r2
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	f042 0220 	orr.w	r2, r2, #32
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	f002 021f 	and.w	r2, r2, #31
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0ab      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1b6>
 8000f4e:	e05c      	b.n	800100a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb28 	bl	80005a4 <HAL_GetTick>
 8000f54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f58:	e00a      	b.n	8000f70 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fb23 	bl	80005a4 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d902      	bls.n	8000f70 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f000 bf0d 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d102      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2b2>
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	e015      	b.n	8000fce <HAL_RCC_OscConfig+0x2de>
 8000fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fc2:	fa93 f3a3 	rbit	r3, r3
 8000fc6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_RCC_OscConfig+0x314>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fd6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fda:	fa92 f2a2 	rbit	r2, r2
 8000fde:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fe2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	f042 0220 	orr.w	r2, r2, #32
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	f002 021f 	and.w	r2, r2, #31
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1ab      	bne.n	8000f5a <HAL_RCC_OscConfig+0x26a>
 8001002:	e002      	b.n	800100a <HAL_RCC_OscConfig+0x31a>
 8001004:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800100e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 817f 	beq.w	800131e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001020:	4ba7      	ldr	r3, [pc, #668]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00c      	beq.n	8001046 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102c:	4ba4      	ldr	r3, [pc, #656]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d173      	bne.n	8001120 <HAL_RCC_OscConfig+0x430>
 8001038:	4ba1      	ldr	r3, [pc, #644]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001044:	d16c      	bne.n	8001120 <HAL_RCC_OscConfig+0x430>
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001058:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d102      	bne.n	8001076 <HAL_RCC_OscConfig+0x386>
 8001070:	4b93      	ldr	r3, [pc, #588]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	e013      	b.n	800109e <HAL_RCC_OscConfig+0x3ae>
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800108e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800109a:	4b89      	ldr	r3, [pc, #548]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	2202      	movs	r2, #2
 80010a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010a8:	fa92 f2a2 	rbit	r2, r2
 80010ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010b4:	fab2 f282 	clz	r2, r2
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f042 0220 	orr.w	r2, r2, #32
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	f002 021f 	and.w	r2, r2, #31
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00a      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3f6>
 80010d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d002      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f000 be52 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	21f8      	movs	r1, #248	; 0xf8
 80010fc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001104:	fa91 f1a1 	rbit	r1, r1
 8001108:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800110c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001110:	fab1 f181 	clz	r1, r1
 8001114:	b2c9      	uxtb	r1, r1
 8001116:	408b      	lsls	r3, r1
 8001118:	4969      	ldr	r1, [pc, #420]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e0fe      	b.n	800131e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8088 	beq.w	8001242 <HAL_RCC_OscConfig+0x552>
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001144:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001152:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	2301      	movs	r3, #1
 800115c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fa21 	bl	80005a4 <HAL_GetTick>
 8001162:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	e00a      	b.n	800117e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff fa1c 	bl	80005a4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d902      	bls.n	800117e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	f000 be06 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001190:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x4be>
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	e013      	b.n	80011d6 <HAL_RCC_OscConfig+0x4e6>
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	2202      	movs	r2, #2
 80011d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011e0:	fa92 f2a2 	rbit	r2, r2
 80011e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ec:	fab2 f282 	clz	r2, r2
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0af      	beq.n	8001168 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	21f8      	movs	r1, #248	; 0xf8
 800121e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001226:	fa91 f1a1 	rbit	r1, r1
 800122a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800122e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001232:	fab1 f181 	clz	r1, r1
 8001236:	b2c9      	uxtb	r1, r1
 8001238:	408b      	lsls	r3, r1
 800123a:	4921      	ldr	r1, [pc, #132]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e06d      	b.n	800131e <HAL_RCC_OscConfig+0x62e>
 8001242:	2301      	movs	r3, #1
 8001244:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001254:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001262:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	461a      	mov	r2, r3
 800126a:	2300      	movs	r3, #0
 800126c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff f999 	bl	80005a4 <HAL_GetTick>
 8001272:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	e00a      	b.n	800128e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001278:	f7ff f994 	bl	80005a4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d902      	bls.n	800128e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	f000 bd7e 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5d4>
 80012b8:	4b01      	ldr	r3, [pc, #4]	; (80012c0 <HAL_RCC_OscConfig+0x5d0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e016      	b.n	80012ec <HAL_RCC_OscConfig+0x5fc>
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012e8:	4bbf      	ldr	r3, [pc, #764]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	2202      	movs	r2, #2
 80012ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ac      	bne.n	8001278 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001322:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8113 	beq.w	800155a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001338:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07c      	beq.n	800143e <HAL_RCC_OscConfig+0x74e>
 8001344:	2301      	movs	r3, #1
 8001346:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001356:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4ba2      	ldr	r3, [pc, #648]	; (80015ec <HAL_RCC_OscConfig+0x8fc>)
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	461a      	mov	r2, r3
 800136a:	2301      	movs	r3, #1
 800136c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff f919 	bl	80005a4 <HAL_GetTick>
 8001372:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	e00a      	b.n	800138e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff f914 	bl	80005a4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d902      	bls.n	800138e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	f000 bcfe 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013d2:	2202      	movs	r2, #2
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 80013f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013fa:	2102      	movs	r1, #2
 80013fc:	6019      	str	r1, [r3, #0]
 80013fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001402:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fa93 f1a3 	rbit	r1, r3
 800140c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001410:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001414:	6019      	str	r1, [r3, #0]
  return result;
 8001416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d09d      	beq.n	8001378 <HAL_RCC_OscConfig+0x688>
 800143c:	e08d      	b.n	800155a <HAL_RCC_OscConfig+0x86a>
 800143e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001442:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001460:	601a      	str	r2, [r3, #0]
  return result;
 8001462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001466:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800146a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x8fc>)
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	461a      	mov	r2, r3
 800147c:	2300      	movs	r3, #0
 800147e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff f890 	bl	80005a4 <HAL_GetTick>
 8001484:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff f88b 	bl	80005a4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d902      	bls.n	80014a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	f000 bc75 	b.w	8001d8a <HAL_RCC_OscConfig+0x109a>
 80014a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014a8:	2202      	movs	r2, #2
 80014aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014f0:	2202      	movs	r2, #2
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fa93 f2a3 	rbit	r2, r3
 8001502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001506:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800150a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 800150e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001514:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001518:	2102      	movs	r1, #2
 800151a:	6019      	str	r1, [r3, #0]
 800151c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001520:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f1a3 	rbit	r1, r3
 800152a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001532:	6019      	str	r1, [r3, #0]
  return result;
 8001534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001538:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d197      	bne.n	800148a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 81a5 	beq.w	80018ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_RCC_OscConfig+0x8f8>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_RCC_OscConfig+0x900>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d121      	bne.n	8001600 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_RCC_OscConfig+0x900>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x900>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c8:	f7fe ffec 	bl	80005a4 <HAL_GetTick>
 80015cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e010      	b.n	80015f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7fe ffe7 	bl	80005a4 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d908      	bls.n	80015f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e3d1      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	10908120 	.word	0x10908120
 80015f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4b8d      	ldr	r3, [pc, #564]	; (800182c <HAL_RCC_OscConfig+0xb3c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0e8      	beq.n	80015d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x92e>
 8001610:	4b87      	ldr	r3, [pc, #540]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a86      	ldr	r2, [pc, #536]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e035      	b.n	800168a <HAL_RCC_OscConfig+0x99a>
 800161e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001622:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x958>
 800162e:	4b80      	ldr	r3, [pc, #512]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a7f      	ldr	r2, [pc, #508]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	4b7d      	ldr	r3, [pc, #500]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a7c      	ldr	r2, [pc, #496]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001640:	f023 0304 	bic.w	r3, r3, #4
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	e020      	b.n	800168a <HAL_RCC_OscConfig+0x99a>
 8001648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d10c      	bne.n	8001672 <HAL_RCC_OscConfig+0x982>
 8001658:	4b75      	ldr	r3, [pc, #468]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a74      	ldr	r2, [pc, #464]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a71      	ldr	r2, [pc, #452]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e00b      	b.n	800168a <HAL_RCC_OscConfig+0x99a>
 8001672:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8081 	beq.w	800179e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169c:	f7fe ff82 	bl	80005a4 <HAL_GetTick>
 80016a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7fe ff7d 	bl	80005a4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e365      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
 80016be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001700:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001704:	601a      	str	r2, [r3, #0]
  return result;
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800170e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d102      	bne.n	800172a <HAL_RCC_OscConfig+0xa3a>
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	e013      	b.n	8001752 <HAL_RCC_OscConfig+0xa62>
 800172a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001732:	2202      	movs	r2, #2
 8001734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001748:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001756:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800175a:	2102      	movs	r1, #2
 800175c:	6011      	str	r1, [r2, #0]
 800175e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001762:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	fa92 f1a2 	rbit	r1, r2
 800176c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001770:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001774:	6011      	str	r1, [r2, #0]
  return result;
 8001776:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800177a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	fab2 f282 	clz	r2, r2
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	f002 021f 	and.w	r2, r2, #31
 8001790:	2101      	movs	r1, #1
 8001792:	fa01 f202 	lsl.w	r2, r1, r2
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d084      	beq.n	80016a6 <HAL_RCC_OscConfig+0x9b6>
 800179c:	e083      	b.n	80018a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7fe ff01 	bl	80005a4 <HAL_GetTick>
 80017a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7fe fefc 	bl	80005a4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e2e4      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001802:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001806:	601a      	str	r2, [r3, #0]
  return result;
 8001808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001810:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0xb44>
 8001826:	4b02      	ldr	r3, [pc, #8]	; (8001830 <HAL_RCC_OscConfig+0xb40>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	e017      	b.n	800185c <HAL_RCC_OscConfig+0xb6c>
 800182c:	40007000 	.word	0x40007000
 8001830:	40021000 	.word	0x40021000
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800183c:	2202      	movs	r2, #2
 800183e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	4bb3      	ldr	r3, [pc, #716]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001860:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001864:	2102      	movs	r1, #2
 8001866:	6011      	str	r1, [r2, #0]
 8001868:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800186c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	fa92 f1a2 	rbit	r1, r2
 8001876:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800187a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800187e:	6011      	str	r1, [r2, #0]
  return result;
 8001880:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001884:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	fab2 f282 	clz	r2, r2
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f002 021f 	and.w	r2, r2, #31
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d180      	bne.n	80017a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018a6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d105      	bne.n	80018ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ae:	4b9e      	ldr	r3, [pc, #632]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a9d      	ldr	r2, [pc, #628]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 80018b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 825e 	beq.w	8001d88 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	f000 821f 	beq.w	8001d18 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	f040 8170 	bne.w	8001bcc <HAL_RCC_OscConfig+0xedc>
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001910:	601a      	str	r2, [r3, #0]
  return result;
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800191a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001926:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	461a      	mov	r2, r3
 800192e:	2300      	movs	r3, #0
 8001930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7fe fe37 	bl	80005a4 <HAL_GetTick>
 8001936:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	e009      	b.n	8001950 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193c:	f7fe fe32 	bl	80005a4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e21c      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
 8001950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001954:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001974:	601a      	str	r2, [r3, #0]
  return result;
 8001976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800197e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d102      	bne.n	800199a <HAL_RCC_OscConfig+0xcaa>
 8001994:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	e027      	b.n	80019ea <HAL_RCC_OscConfig+0xcfa>
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019f6:	6011      	str	r1, [r2, #0]
 80019f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019fc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	fa92 f1a2 	rbit	r1, r2
 8001a06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a0a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a0e:	6011      	str	r1, [r2, #0]
  return result;
 8001a10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a14:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d182      	bne.n	800193c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a19      	ldr	r1, [r3, #32]
 8001a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	492d      	ldr	r1, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aa6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2301      	movs	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7fe fd71 	bl	80005a4 <HAL_GetTick>
 8001ac2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe fd6c 	bl	80005a4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e156      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b00:	601a      	str	r2, [r3, #0]
  return result;
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0xe3c>
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <HAL_RCC_OscConfig+0xe38>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	e02a      	b.n	8001b7c <HAL_RCC_OscConfig+0xe8c>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b64:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b86      	ldr	r3, [pc, #536]	; (8001d94 <HAL_RCC_OscConfig+0x10a4>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b88:	6011      	str	r1, [r2, #0]
 8001b8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b9c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ba0:	6011      	str	r1, [r2, #0]
  return result;
 8001ba2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ba6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f43f af7f 	beq.w	8001ac8 <HAL_RCC_OscConfig+0xdd8>
 8001bca:	e0dd      	b.n	8001d88 <HAL_RCC_OscConfig+0x1098>
 8001bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bf0:	601a      	str	r2, [r3, #0]
  return result;
 8001bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bfa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fcc7 	bl	80005a4 <HAL_GetTick>
 8001c16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe fcc2 	bl	80005a4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0ac      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c54:	601a      	str	r2, [r3, #0]
  return result;
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_OscConfig+0xf8a>
 8001c74:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_OscConfig+0x10a4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e027      	b.n	8001cca <HAL_RCC_OscConfig+0xfda>
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <HAL_RCC_OscConfig+0x10a4>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd6:	6011      	str	r1, [r2, #0]
 8001cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cdc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fa92 f1a2 	rbit	r1, r2
 8001ce6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cee:	6011      	str	r1, [r2, #0]
  return result;
 8001cf0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	fab2 f282 	clz	r2, r2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f042 0220 	orr.w	r2, r2, #32
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f002 021f 	and.w	r2, r2, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d182      	bne.n	8001c1c <HAL_RCC_OscConfig+0xf2c>
 8001d16:	e037      	b.n	8001d88 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e02e      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_OscConfig+0x10a4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_RCC_OscConfig+0x10a4>)
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d40:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d117      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d58:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000

08001d98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b09e      	sub	sp, #120	; 0x78
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e162      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b90      	ldr	r3, [pc, #576]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d910      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b8d      	ldr	r3, [pc, #564]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	498b      	ldr	r1, [pc, #556]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e14a      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b82      	ldr	r3, [pc, #520]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	497f      	ldr	r1, [pc, #508]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80dc 	beq.w	8001fc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d13c      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xf6>
 8001e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xa6>
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e00f      	b.n	8001e5e <HAL_RCC_ClockConfig+0xc6>
 8001e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e50:	663b      	str	r3, [r7, #96]	; 0x60
 8001e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e62:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e66:	fa92 f2a2 	rbit	r2, r2
 8001e6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e6e:	fab2 f282 	clz	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f042 0220 	orr.w	r2, r2, #32
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d17b      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0f3      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d13c      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x178>
 8001e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x128>
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	e00f      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x148>
 8001ec0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ee8:	fa92 f2a2 	rbit	r2, r2
 8001eec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f042 0220 	orr.w	r2, r2, #32
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	f002 021f 	and.w	r2, r2, #31
 8001f00:	2101      	movs	r1, #1
 8001f02:	fa01 f202 	lsl.w	r2, r1, r2
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d13a      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b2      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
 8001f10:	2302      	movs	r3, #2
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1a0>
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e00d      	b.n	8001f54 <HAL_RCC_ClockConfig+0x1bc>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	2302      	movs	r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2202      	movs	r2, #2
 8001f56:	61ba      	str	r2, [r7, #24]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	fa92 f2a2 	rbit	r2, r2
 8001f5e:	617a      	str	r2, [r7, #20]
  return result;
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	fab2 f282 	clz	r2, r2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e079      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	491a      	ldr	r1, [pc, #104]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fb06 	bl	80005a4 <HAL_GetTick>
 8001f98:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7fe fb02 	bl	80005a4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e061      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d214      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4906      	ldr	r1, [pc, #24]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCC_ClockConfig+0x25c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e040      	b.n	8002076 <HAL_RCC_ClockConfig+0x2de>
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	491a      	ldr	r1, [pc, #104]	; (8002080 <HAL_RCC_ClockConfig+0x2e8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x2e8>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4912      	ldr	r1, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x2e8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800203a:	f000 f829 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800203e:	4601      	mov	r1, r0
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_RCC_ClockConfig+0x2e8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002048:	22f0      	movs	r2, #240	; 0xf0
 800204a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	fa92 f2a2 	rbit	r2, r2
 8002052:	60fa      	str	r2, [r7, #12]
  return result;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	40d3      	lsrs	r3, r2
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_RCC_ClockConfig+0x2ec>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	fa21 f303 	lsr.w	r3, r1, r3
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_RCC_ClockConfig+0x2f0>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCC_ClockConfig+0x2f4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa54 	bl	800051c <HAL_InitTick>
  
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3778      	adds	r7, #120	; 0x78
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	080021d4 	.word	0x080021d4
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b08b      	sub	sp, #44	; 0x2c
 8002094:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x30>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x36>
 80020be:	e03f      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020c2:	623b      	str	r3, [r7, #32]
      break;
 80020c4:	e03f      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	fa92 f2a2 	rbit	r2, r2
 80020d8:	607a      	str	r2, [r7, #4]
  return result;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	40d3      	lsrs	r3, r2
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_RCC_GetSysClockFreq+0xcc>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	220f      	movs	r2, #15
 80020f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	60fa      	str	r2, [r7, #12]
  return result;
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	40d3      	lsrs	r3, r2
 8002108:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_RCC_GetSysClockFreq+0xd0>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002118:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc8>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	e007      	b.n	800213a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc8>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	623b      	str	r3, [r7, #32]
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002142:	623b      	str	r3, [r7, #32]
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	6a3b      	ldr	r3, [r7, #32]
}
 8002148:	4618      	mov	r0, r3
 800214a:	372c      	adds	r7, #44	; 0x2c
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000
 8002158:	007a1200 	.word	0x007a1200
 800215c:	080021e4 	.word	0x080021e4
 8002160:	080021f4 	.word	0x080021f4

08002164 <__libc_init_array>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	4d0d      	ldr	r5, [pc, #52]	; (800219c <__libc_init_array+0x38>)
 8002168:	4c0d      	ldr	r4, [pc, #52]	; (80021a0 <__libc_init_array+0x3c>)
 800216a:	1b64      	subs	r4, r4, r5
 800216c:	10a4      	asrs	r4, r4, #2
 800216e:	2600      	movs	r6, #0
 8002170:	42a6      	cmp	r6, r4
 8002172:	d109      	bne.n	8002188 <__libc_init_array+0x24>
 8002174:	4d0b      	ldr	r5, [pc, #44]	; (80021a4 <__libc_init_array+0x40>)
 8002176:	4c0c      	ldr	r4, [pc, #48]	; (80021a8 <__libc_init_array+0x44>)
 8002178:	f000 f820 	bl	80021bc <_init>
 800217c:	1b64      	subs	r4, r4, r5
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	2600      	movs	r6, #0
 8002182:	42a6      	cmp	r6, r4
 8002184:	d105      	bne.n	8002192 <__libc_init_array+0x2e>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	f855 3b04 	ldr.w	r3, [r5], #4
 800218c:	4798      	blx	r3
 800218e:	3601      	adds	r6, #1
 8002190:	e7ee      	b.n	8002170 <__libc_init_array+0xc>
 8002192:	f855 3b04 	ldr.w	r3, [r5], #4
 8002196:	4798      	blx	r3
 8002198:	3601      	adds	r6, #1
 800219a:	e7f2      	b.n	8002182 <__libc_init_array+0x1e>
 800219c:	08002204 	.word	0x08002204
 80021a0:	08002204 	.word	0x08002204
 80021a4:	08002204 	.word	0x08002204
 80021a8:	08002208 	.word	0x08002208

080021ac <memset>:
 80021ac:	4402      	add	r2, r0
 80021ae:	4603      	mov	r3, r0
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d100      	bne.n	80021b6 <memset+0xa>
 80021b4:	4770      	bx	lr
 80021b6:	f803 1b01 	strb.w	r1, [r3], #1
 80021ba:	e7f9      	b.n	80021b0 <memset+0x4>

080021bc <_init>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr

080021c8 <_fini>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr
